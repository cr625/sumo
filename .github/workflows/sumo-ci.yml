name: SUMO CI

on:
  workflow_call:
    inputs:
      vampire_timeout:
        description: 'How long vampire should run'
        required: true
        type: string

env:
  DEFAULT_DOCKER_ACCOUNT: apease

jobs:
  derive_docker:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      image_account: ${{ steps.step1.outputs.image_account }}
    steps:
      - id: step1
        env:
          DOCKER_ACCOUNT: ${{ vars.DOCKER_ACCOUNT }}
        run: echo "image_account=${DOCKER_ACCOUNT:-$DEFAULT_DOCKER_ACCOUNT}" >> "$GITHUB_OUTPUT"

  build_sumo_tptp:
    runs-on: ubuntu-latest
    needs: derive_docker
    container:
      image: ${{ needs.derive_docker.outputs.image_account }}/sumo-ci:latest
    env:
      # Explicitly set SIGMA_HOME
      SIGMA_HOME: /root/sigmakee-runtime

    steps:
    # This step is not being utilized, redundant
#    - uses: actions/checkout@v4
#      with:
#        path: sumo

    # This works to produce SUMO.fof, but the env paths are incorrect and I
    # believe that all of the KBs were originally stored in the sumo-ci image.
    # TDN 1/26/25
    - name: Setup SigmaKEE
      #env:
        #ONTOLOGYPORTAL_GIT: ${{ github.workspace }}
      run: |
        #echo "SIGMA_HOME: $SIGMA_HOME"
        #mkdir -p $SIGMA_HOME/KBs/WordNetMappings
        #wget https://raw.githubusercontent.com/ontologyportal/sigmakee/master/config.xml
        #cp ./config.xml $SIGMA_HOME/KBs
        #cp -R $ONTOLOGYPORTAL_GIT/sumo/* $SIGMA_HOME/KBs
        #cp /opt/WordNet-3.0/dict/* $SIGMA_HOME/KBs/WordNetMappings/
        sed -i "s|/home/theuser/.sigmakee|$SIGMA_HOME|g" $SIGMA_HOME/KBs/config.xml
        #sed -i "s|/home/theuser/workspace/sumo|$ONTOLOGYPORTAL_GIT/sumo|g" $SIGMA_HOME/KBs/config.xml
        sed -i "s|/home/theuser/E/bin/e_ltb_runner|/usr/local/bin/e_ltb_runner|g" $SIGMA_HOME/KBs/config.xml
        sed -i "s|/home/theuser/workspace/vampire/vampire|/usr/local/bin/vampire|g" $SIGMA_HOME/KBs/config.xml
        sed -i 's|<preference name="TPTP" value="yes" \/>|<preference name="TPTP" value="no"\/>|g' $SIGMA_HOME/KBs/config.xml
        # DEBUG
#        cat $SIGMA_HOME/KBs/config.xml

    - name: Produce SUMO.fof
      run: java -Xmx10g -Xss1m -cp "/root/sigmakee/*" com.articulate.sigma.trans.SUMOKBtoTPTPKB

    - name: Upload SUMO.fof
      uses: actions/upload-artifact@v4
      with:
        name: SUMO.fof
        path: ${{ env.SIGMA_HOME }}/KBs/SUMO.fof

  run_vampire:
    runs-on: ubuntu-latest
    needs: [derive_docker,build_sumo_tptp]
    container:
      image: ${{ needs.derive_docker.outputs.image_account }}/sumo-ci:latest
    env:
      # Explicitly set SIGMA_HOME
      SIGMA_HOME: /root/sigmakee-runtime

    steps:
    - uses: actions/download-artifact@v4
      with:
        name: SUMO.fof

    - name: Run vampire against SUMO.fof
      env:
        VAMPIRE_TIMEOUT: ${{ inputs.vampire_timeout }}
      run: |
        # DEBUG (work dir: /__w/sumo/sumo)
        #echo "work dir:" pwd
        # DEBUG
        #ls -l $SIGMA_HOME/KBs
        # DEBUG
        #set
        ls -l .
        echo "VAMPIRE_TIMEOUT: $VAMPIRE_TIMEOUT"
        cp SUMO.fof $SIGMA_HOME/KBs && cd $SIGMA_HOME/KBs
        #/usr/local/bin/vampire --proof tptp -t $VAMPIRE_TIMEOUT SUMO.fof > vamp-out.txt || echo "Ignoring vampire exit code"
        /usr/local/bin/vampire --cores 0 --mode portfolio --schedule snake_tptp_uns --proof tptp --input_syntax tptp --output_axiom_names on -t $VAMPIRE_TIMEOUT SUMO.fof > vamp-out.txt || echo "Ignoring vampire exit code"
        mkdir -p $CATALINA_HOME/webapps/sigma/graph
        java -Xmx10g -Xss1m -cp "/root/sigmakee/*" com.articulate.sigma.trans.TPTP3ProofProcessor -f vamp-out.txt
        # DEBUG (pwd: /root/sigma-runtime/KBs)

    - name: Upload vamp-out.txt & proof.* files
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: logs-and-graphs
        path: |
          ${{ env.SIGMA_HOME }}/KBs/vamp-out.txt
          /usr/local/tomcat/webapps/sigma/graph/proof.*

    - name: Check results
      if: success() || failure()
      run: |
        # allow errors
        # DEBUG (pwd: /__w/sumo/sumo)
        set +e
        grep "Refutation found" ${{ env.SIGMA_HOME }}/KBs/vamp-out.txt
        # Remap exit code. If refutation found - it's an error
        if [ $? -eq 0 ]
        then
          exit 1
        else
          exit 0
        fi
